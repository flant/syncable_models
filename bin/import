#!/usr/bin/env ruby

require File.join((ENV['APP_PATH'] || File.expand_path('.')), 'config', 'environment')

## Importer
print 'Starting Importer... '

interval = SyncableModels::Importer.interval
timeout = SyncableModels::Importer.timeout

importer = Concurrent::TimerTask.new(execution_interval: interval, timeout_interval: timeout, run_now: true) do
  begin
    SyncableModels::Importer.import
  rescue => exc
    Rails.logger.error "[Importer] Error: #{exc.message}\n" \
                       "    backtrace:\n        #{exc.backtrace.join("\n        ")}"
  end
end
importer.execute
print "done.\n"

# Signal catching
def shut_down
  puts "\nShutting down gracefully..."
  sleep 1
end

["TERM", "INT"].each do |sig|
  trap(sig) do
    shut_down
    exit
  end
end


loop { sleep }
